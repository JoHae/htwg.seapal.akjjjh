package controllers;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.codehaus.jackson.node.ObjectNode;

import play.data.DynamicForm;
import play.db.DB;
import play.mvc.Controller;
import play.mvc.Result;

public class Trips extends Controller {

	public static Result get(String logbookId) {
		return getTrips(logbookId);
	}
	
	public static Result updateCreate(String logbookId) {
		final DynamicForm form = form().bindFromRequest();
		final String dataId = form.get("dataId");
		
		String query = "";
		if (dataId == null) {
			return badRequest("Missing parameter [dataId]");
		} else if (dataId.equals("NULL") == false) {
			query = "UPDATE `seapal`.`trip` " +
					"SET " +
					"triptitle='" + form.get("triptitle") + "', " +
					"destination='" + form.get("destination") + "', " +
					"startpoint='" + form.get("startpoint") + "', " +
					"skipper='" + form.get("skipper") + "', " +
					"crew='" + form.get("crew") + "', " +
					"notes='" + form.get("notes") + "', " +
					"motor='" + form.get("motorminutes") + "', " +
					"tank_filled='" + form.get("fueltankfilled") + "' " +
					"WHERE " +
					"tripID='" + dataId + "'";
		} else {
			query = "INSERT INTO `seapal`.`trip` ( " +
							"`tripID`, `logbookID`, `triptitle`, `destination`, `startpoint`, `skipper`, `crew`, `notes`, `motor`, `tank_filled` " +
							") VALUES ( " +
							"NULL, " +
							"'" + logbookId + "', " +
							"'" + form.get("triptitle") + "', " +
							"'" + form.get("destination") + "', " +
							"'" + form.get("startpoint") + "', " +
							"'" + form.get("skipper") + "', " +
							"'" + form.get("crew") + "', " +
							"'" + form.get("notes") + "', " +
							"'" + form.get("motorminutes") + "', " +
							(form.get("fueltankfilled").equals("") ? "NULL " : ("'" + form.get("fueltankfilled") + "' ")) +  
							")";
		}
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			select.executeUpdate(query);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
		
		return getTrips(logbookId);
	}
	
	public static Result delete(String logbookId) {
		final DynamicForm form = form().bindFromRequest();
		final String removeId = form.get("removeId");
		
		if (removeId == null) {
			return badRequest("Missing parameter [removeId]");
		}
		String query = "" + 
				"DELETE FROM `seapal`.`trip` " +
				"WHERE tripID=" + removeId;
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			select.executeUpdate(query);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
		return getTrips(logbookId);
	}
	
	
	public static Result getNavigationInfo(String logbookId) {
		ObjectNode tJsonNavInfo = play.libs.Json.newObject();
		
		String Query = "SELECT * FROM logbook WHERE logbookID=" + logbookId;
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			ResultSet result = select.executeQuery(Query);

			result.next();
			tJsonNavInfo.put("triptitle", result.getString("triptitle"));
			while (result.next()) {
				ObjectNode tJsonLogBook = play.libs.Json.newObject();
				tJsonLogBook.put("triptitle", result.getString("triptitle"));
				tJsonLogBook.put("startpoint", result.getString("startpoint"));
				tJsonLogBook.put("destination", result.getString("destination"));
				tJsonLogBook.put("skipper", result.getString("skipper"));
				tJsonLogBook.put("starttime", result.getString("start"));
				tJsonLogBook.put("endtime", result.getString("end"));
				tJsonLogBook.put("duration", "12");
				tJsonLogBook.put("motorminutes", result.getString("motor"));
				tJsonLogBook.put("fueltankfilled", result.getString("tank_filled"));
				tJsonLogBook.put("crew", result.getString("crew"));
				tJsonLogBook.put("notes", result.getString("notes"));
				tJsonLogBook.put("logbookId", result.getString("logbookID"));
				tJsonLogBook.put("dataId", result.getString("tripID"));
				
				tJsonResult.add(tJsonLogBook);
			}
			connection.close();
			return ok(tJsonNavInfo);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
	}
	
	
	private static Result getTrips(String logbookId) {
		ArrayNode tJsonResult = JsonNodeFactory.instance.arrayNode();
		
		String Query = "SELECT * FROM `seapal`.`trip` WHERE logbookID=" + logbookId;
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			ResultSet result = select.executeQuery(Query);

			while (result.next()) {
				ObjectNode tJsonLogBook = play.libs.Json.newObject();
				tJsonLogBook.put("triptitle", result.getString("triptitle"));
				tJsonLogBook.put("startpoint", result.getString("startpoint"));
				tJsonLogBook.put("destination", result.getString("destination"));
				tJsonLogBook.put("skipper", result.getString("skipper"));
				tJsonLogBook.put("starttime", result.getString("start"));
				tJsonLogBook.put("endtime", result.getString("end"));
				tJsonLogBook.put("duration", "12");
				tJsonLogBook.put("motorminutes", result.getString("motor"));
				tJsonLogBook.put("fueltankfilled", result.getString("tank_filled"));
				tJsonLogBook.put("crew", result.getString("crew"));
				tJsonLogBook.put("notes", result.getString("notes"));
				tJsonLogBook.put("logbookId", result.getString("logbookID"));
				tJsonLogBook.put("dataId", result.getString("tripID"));
				
				tJsonResult.add(tJsonLogBook);
			}
			connection.close();
			return ok(tJsonResult);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
	}
	
}
