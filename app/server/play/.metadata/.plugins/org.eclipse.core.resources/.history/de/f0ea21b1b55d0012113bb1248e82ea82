package controllers;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.codehaus.jackson.node.ObjectNode;

import play.data.DynamicForm;
import play.db.DB;


import play.mvc.BodyParser;
import play.mvc.BodyParser.Json;
import play.mvc.Controller;
import play.mvc.Http.Request;
import play.mvc.Http.RequestBody;
import play.mvc.Result;

public class Logbooks extends Controller {
	
	@BodyParser.Of(BodyParser.Json.class)
	public static Result get() {
		return getLogbooks();
	}
	
	//@BodyParser.Of(BodyParser.Json.class)
	public static Result updateCreate() {
		final DynamicForm form = form().bindFromRequest();
		final String name = form.get("dataId");

		JsonNode json = request().body().asJson();
		String dataId = json.findPath("dataId").getTextValue();
		String query = "";
		if (dataId == null) {
			return badRequest("Missing parameter [dataId]");
		} else if (dataId == "NULL") {
			query = "UPDATE `seapal`.`logbook` " +
					"SET " +
					"shipname='" + form.get("shipname") + "'" +
					"registnumber='" + form.get("shipregisternumber") + "'" +
					"sailsign='" + form.get("sailsign") + "'" +
					"homeport='" + form.get("homeport") + "'" +
					"yachtclub='" + form.get("yachtclub") + "'" +
					"owner='" + form.get("shipowner") + "'" +
					"insurance='" + form.get("insurance") + "'" +
					"callsign='" + form.get("callsign") + "'" +
					"type='" + form.get("shiptype") + "'" +
					"constructer='" + form.get("constructer") + "'" +
					"length='" + form.get("shiplength") + "'" +
					"width='" + form.get("shipwidth") + "'" +
					"gauge='" + form.get("gauge") + "'" +
					"mastheight='" + form.get("mastheight") + "'" +
					"expulsion='" + form.get("expulsion") + "'" +
					"rigtype='" + form.get("rigtype") + "'" +
					"constructionyear='" + form.get("constructionyear") + "'" +
					"engine='" + form.get("engine") + "'" +
					"size_fueltank='" + form.get("size_fueltank") + "'" +
					"size_watertank='" + form.get("size_watertank") + "'" +
					"size_sewagetank='" + form.get("size_sewagetank") + "'" +
					"size_mainsail='" + form.get("size_mainsail") + "'" +
					"size_genua='" + form.get("size_genua") + "'" +
					"size_spi='" + form.get("size_spi") + "'" +
					"WHERE " +
					"logbookID='" + dataId + "'";
		} else {
			query = "INSERT INTO `seapal`.`logbook` ( " +
							"`logbookID`, `shipname`, `registnumber`, `sailsign`, `homeport`, `yachtclub`, `owner`, `insurance`, `callsign`, `type`, " +
							"`constructer`, `length`, `width`, `gauge`, `mastheight`, `expulsion`, `rigtype`, `constructionyear`, `engine`, `size_fueltank`, " +
							"`size_watertank`, `size_sewagetank`, `size_mainsail`, `size_genua`, `size_spi` " +
							") VALUES ( " +
							"NULL, " +
							"'" + form.get("shipname") + "', " +
							"'" + form.get("shipregisternumber") + "', " +
							"'" + form.get("sailsign") + "', " +
							"'" + form.get("homeport") + "', " +
							"'" + form.get("yachtclub") + "', " +
							"'" + form.get("shipowner") + "', " +
							"'" + form.get("insurance") + "', " +
							"'" + form.get("callsign") + "', " +
							"'" + form.get("shiptype") + "', " +
							"'" + form.get("constructer") + "', " +
							"'" + form.get("shiplength") + "', " +
							"'" + form.get("shipwidth") + "', " +
							"'" + form.get("gauge") + "', " +
							"'" + form.get("mastheight") + "', " +
							"'" + form.get("expulsion") + "', " +
							"'" + form.get("rigtype") + "', " +
							"'" + form.get("constructionyear") + "', " +
							"'" + form.get("engine") + "', " +
							"'" + form.get("size_fueltank") + "', " +
							"'" + form.get("size_watertank") + "', " +
							"'" + form.get("size_sewagetank") + "', " +
							"'" + form.get("size_mainsail") + "', " +
							"'" + form.get("size_genua") + "', " +
							"'" + form.get("size_spi") + "', " +
							")";
		}
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			select.executeUpdate(query);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
		
		return getLogbooks();
	}
	
	@BodyParser.Of(Json.class)
	public static Result delete() {
		JsonNode json = request().body().asJson();
		String removeId = json.findPath("removeId").getTextValue();
		if (removeId == null) {
			return badRequest("Missing parameter [removeId]");
		}
		String query = "" + 
				"DELETE FROM `seapal`.`logbook` " +
				"WHERE logbookID=" + removeId;
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			select.executeUpdate(query);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
		return getLogbooks();
	}
	
	
	
	private static Result getLogbooks() {
		ArrayNode tJsonResult = JsonNodeFactory.instance.arrayNode();
		
		String Query = "SELECT * FROM logbook";
		
		try {
			Connection connection = DB.getConnection();
			Statement select = connection.createStatement();
			ResultSet result = select.executeQuery(Query);

			while (result.next()) {
				ObjectNode tJsonLogBook = play.libs.Json.newObject();
				tJsonLogBook.put("shipname", result.getString("shipname"));
				tJsonLogBook.put("shiptype", result.getString("type"));
				tJsonLogBook.put("shipowner", result.getString("owner"));
				tJsonLogBook.put("shipregisternumber", result.getString("registnumber"));
				tJsonLogBook.put("sailsign", result.getString("sailsign"));
				tJsonLogBook.put("homeport", result.getString("homeport"));
				tJsonLogBook.put("yachtclub", result.getString("yachtclub"));
				tJsonLogBook.put("insurance", result.getString("insurance"));
				tJsonLogBook.put("callsign", result.getString("callsign"));
				tJsonLogBook.put("constructer", result.getString("constructer"));
				tJsonLogBook.put("shiplength", result.getString("length"));
				tJsonLogBook.put("engine", result.getString("engine"));
				tJsonLogBook.put("shipwidth", result.getString("width"));
				tJsonLogBook.put("gauge", result.getString("gauge"));
				tJsonLogBook.put("mastheight", result.getString("mastheight"));
				tJsonLogBook.put("expulsion", result.getString("expulsion"));
				tJsonLogBook.put("rigtype", result.getString("rigtype"));
				tJsonLogBook.put("constructionyear", result.getString("constructionyear"));
				tJsonLogBook.put("size_fueltank", result.getString("size_fueltank"));
				tJsonLogBook.put("size_watertank", result.getString("size_watertank"));
				tJsonLogBook.put("size_sewagetank", result.getString("size_sewagetank"));
				tJsonLogBook.put("size_mainsail", result.getString("size_mainsail"));
				tJsonLogBook.put("size_genua", result.getString("size_genua"));
				tJsonLogBook.put("size_spi", result.getString("size_spi"));
				tJsonLogBook.put("dataId", result.getString("logbookID"));
				
				tJsonResult.add(tJsonLogBook);
			}
			connection.close();
			return ok(tJsonResult);
		} catch (SQLException e) {
			e.printStackTrace();
			return badRequest(e.getMessage());
		}
	}

}
